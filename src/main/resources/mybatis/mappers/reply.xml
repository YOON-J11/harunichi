<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.reply">

	<!-- id: DAO/Mapper 인터페이스에서 호출할 메소드 이름 -->
	<!-- parameterType: SQL 쿼리에 전달될 파라미터의 타입 (게시글 ID) -->
	<!-- resultType: 쿼리 결과를 매핑할 객체의 타입 (ReplyVo 객체 리스트) -->

	<!-- 특정 게시글의 모든 댓글 삭제 -->
	<delete id="deleteRepliesByBoardId" parameterType="int">
		DELETE FROM
		reply
		WHERE boardId = #{boardId}
	</delete>

	<!-- 댓글 작성 -->
	<insert id="insertReply"
		parameterType="com.harunichi.board.vo.ReplyVo">
		INSERT INTO reply (
		boardId, replyCont, replyWriter,
		replyDate, replyLike
		) VALUES (
		#{boardId}, #{replyCont},
		#{replyWriter}, NOW(), 0)
	</insert>

	<!-- 특정 게시글의 댓글 목록 조회 -->
	<select id="selectRepliesByBoardId" parameterType="int"
		resultType="com.harunichi.board.vo.ReplyVo">
		SELECT
		replyId, boardId, replyCont, replyWriter, replyDate,
		replyLike
		FROM reply
		WHERE boardId = #{boardId}
		ORDER BY replyDate ASC,
		replyId ASC
	</select>

	<!-- 특정 게시글의 댓글 갯수 -->
	<select id="countRepliesByBoardId" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM reply
		WHERE boardId = #{boardId}
	</select>

	<!-- 댓글 삭제 -->
	<!-- replyId와 replyWriter(사용자 ID)를 받아서 해당 댓글 삭제 -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM reply
		WHERE replyId = #{replyId} AND replyWriter = #{replyWriter}
	</delete>

	<!-- 댓글 수정 -->
	<!-- replyId, replyCont, replyWriter(사용자 ID)를 받아서 해당 댓글 내용 수정 -->
	 <update id="updateReply" parameterType="map">
        UPDATE reply
        SET replyCont = #{replyCont}
        WHERE replyId = #{replyId} AND replyWriter = #{replyWriter}
    </update>


</mapper>